React component ชื่อ Chirp ซึ่งใช้สำหรับแสดงและแก้ไขข้อความ
(หรือที่เรียกว่า chirp) ในระบบที่รองรับการใช้งาน Inertia.js
เพื่อจัดการ front-end และ back-end flow โดยมีการใช้ Hooks และ Components หลายตัวเพื่อจัดการสถานะและ UI

Flow การทำงานของโค้ด
1. Initialization และการรับข้อมูล
Chirp รับ chirp เป็น props ซึ่งเป็นข้อมูลที่ประกอบด้วยข้อความ, ผู้ใช้งานที่สร้าง chirp และเวลา.
มีการดึง auth จาก usePage().props เพื่อดูข้อมูลผู้ใช้งานปัจจุบัน (เช่น user ID).
2. การจัดการสถานะ
ใช้ useState สร้าง state ชื่อ editing (ค่าเริ่มต้น false) เพื่อควบคุมว่าตอนนี้กำลังแก้ไขข้อความอยู่หรือไม่.
ใช้ useForm เพื่อจัดการข้อมูลฟอร์ม:
data.message แทนข้อความที่จะแก้ไข.
setData ใช้ปรับค่าของ data.
patch ส่งคำสั่ง HTTP PATCH ไปที่ backend.
clearErrors และ reset ใช้เคลียร์ข้อผิดพลาดและคืนค่าเริ่มต้น.
3. การแสดงผล UI
แสดงผู้ใช้และข้อความ

แสดงชื่อผู้ใช้งาน (chirp.user.name).
แสดงวันที่และเวลาที่ข้อความถูกสร้าง (chirp.created_at).
หากข้อความถูกแก้ไข (chirp.updated_at !== chirp.created_at) จะแสดงคำว่า "edited".
Dropdown สำหรับแก้ไข/ลบ

เฉพาะผู้ใช้งานที่สร้างข้อความ (ตรวจสอบโดย chirp.user.id === auth.user.id) จะเห็นปุ่ม Dropdown.
ภายใน Dropdown:
ปุ่ม "Edit" จะตั้งค่า editing เป็น true เพื่อแสดงฟอร์มแก้ไข.
ปุ่ม "Delete" ใช้ลิงก์ที่ส่งคำสั่ง DELETE ไปยัง backend (route chirps.destroy).
ฟอร์มแก้ไขข้อความ

ถ้า editing เป็น true:

แสดง <textarea> ที่สามารถแก้ไขข้อความได้ (data.message).
มีปุ่ม "Save" เพื่อบันทึกการแก้ไข (เรียกฟังก์ชัน submit).
มีปุ่ม "Cancel" เพื่อยกเลิกการแก้ไข (ตั้งค่า editing เป็น false และรีเซ็ตข้อมูล).
ถ้า editing เป็น false:

แสดงข้อความปัจจุบัน (chirp.message).
4. ฟังก์ชันการทำงาน
การแก้ไขข้อความ

เมื่อกดปุ่ม "Edit":
setEditing(true) ทำให้ฟอร์มแก้ไขปรากฏ.
เมื่อกดปุ่ม "Save":
ฟังก์ชัน submit เรียก patch เพื่อส่งข้อมูลไปยัง backend.
หากสำเร็จ (callback onSuccess):
setEditing(false) ปิดฟอร์มแก้ไข.
เมื่อกดปุ่ม "Cancel":
ฟอร์มถูกปิด, ข้อผิดพลาดและข้อมูลถูกรีเซ็ต.
การลบข้อความ

เมื่อกดปุ่ม "Delete":
ลิงก์ใน Dropdown ใช้คำสั่ง DELETE เพื่อส่งคำขอไปยัง backend (route chirps.destroy).

-----------------------------------------------------------------------------
สรุป Flow การทำงาน
Render ข้อมูลผู้ใช้งานและข้อความ.
หากผู้ใช้งานปัจจุบันเป็นเจ้าของข้อความ จะมีตัวเลือกแก้ไขหรือลบใน Dropdown.
เมื่อกด "Edit" จะเข้าสู่โหมดแก้ไข (ฟอร์ม).
การกด "Save" จะส่งข้อมูลที่แก้ไขไปยัง backend ผ่านคำสั่ง PATCH.
การกด "Cancel" จะยกเลิกการแก้ไขและคืนค่าเดิม.
การกด "Delete" จะลบข้อความโดยส่งคำขอ DELETE ไปยัง backend.
ทุกการกระทำถูกจัดการแบบ event-driven ทำให้โค้ดนี้ตอบสนองต่อการโต้ตอบของผู้ใช้ได้อย่างดี.


----------------------------------------------------
Profile controller
อธิบายฟังก์ชันการทำงาน
edit(Request $request)

ใช้สำหรับแสดงหน้าแบบฟอร์มโปรไฟล์ของผู้ใช้
ตรวจสอบว่าผู้ใช้จำเป็นต้องยืนยันอีเมลหรือไม่ (mustVerifyEmail)
ส่งข้อมูลสถานะล่าสุด (ถ้ามี) ไปที่หน้าฟอร์มผ่าน session('status')
update(ProfileUpdateRequest $request)

รับข้อมูลจากฟอร์มแก้ไขโปรไฟล์ และตรวจสอบข้อมูลด้วย ProfileUpdateRequest
อัปเดตข้อมูลในโมเดล User และตั้งค่าให้ email_verified_at เป็น null หากอีเมลมีการเปลี่ยนแปลง
บันทึกข้อมูล และส่งผู้ใช้กลับไปยังหน้าแก้ไขโปรไฟล์
destroy(Request $request)

ตรวจสอบรหัสผ่านปัจจุบันของผู้ใช้
ลบบัญชีผู้ใช้ออกจากฐานข้อมูล
ทำให้เซสชันหมดอายุและสร้าง token ใหม่สำหรับป้องกันการโจมตี
ส่งผู้ใช้กลับไปยังหน้าแรก
การใช้งานจริง
หน้าโปรไฟล์ ใช้ edit สำหรับแสดงแบบฟอร์ม
อัปเดตโปรไฟล์ ใช้ update เมื่อผู้ใช้ส่งแบบฟอร์มแก้ไขข้อมูล
ลบบัญชี ใช้ destroy เมื่อผู้ใช้กดยืนยันการลบบัญชี
